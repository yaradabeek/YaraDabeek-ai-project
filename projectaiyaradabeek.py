# -*- coding: utf-8 -*-
"""ProjectAiYaraDabeek

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EVwCTFXEo72jKTPtLEKFBrlfgOCIPgKi
"""

import pandas as pd


data = [
  {"date": "5/9/2025, 11:53:50 PM", "duration": "11 seconds", "jumps": 5, "score": 0, "obstaclesPassed": 0},
  {"date": "5/9/2025, 11:54:16 PM", "duration": "14 seconds", "jumps": 10, "score": 1, "obstaclesPassed": 1},
  {"date": "5/9/2025, 11:55:19 PM", "duration": "67 seconds", "jumps": 40, "score": 10, "obstaclesPassed": 12},
  {"date": "5/9/2025, 11:56:46 PM", "duration": "153 seconds", "jumps": 100, "score": 30, "obstaclesPassed": 35},
  {"date": "5/10/2025, 1:12:26 PM", "duration": "20 seconds", "jumps": 8, "score": 1, "obstaclesPassed": 2},
  {"date": "5/11/2025, 9:12:22 PM", "duration": "20 seconds", "jumps": 9, "score": 2, "obstaclesPassed": 3},
  {"date": "5/11/2025, 9:13:01 PM", "duration": "59 seconds", "jumps": 55, "score": 12, "obstaclesPassed": 14},
  {"date": "5/11/2025, 9:15:31 PM", "duration": "209 seconds", "jumps": 120, "score": 40, "obstaclesPassed": 42},
  {"date": "5/11/2025, 9:16:00 PM", "duration": "180 seconds", "jumps": 85, "score": 28, "obstaclesPassed": 30},
  {"date": "5/11/2025, 9:20:00 PM", "duration": "90 seconds", "jumps": 50, "score": 15, "obstaclesPassed": 17}
]

df = pd.DataFrame(data)


df.head()

df['duration_seconds'] = df['duration'].apply(lambda x: int(x.split(' ')[0]))


df.head()

total_jumps = df['jumps'].sum()
total_score = df['score'].sum()
average_jumps = df['jumps'].mean()


print(f"إجمالي القفزات: {total_jumps}")
print(f"إجمالي النقاط: {total_score}")
print(f"متوسط القفزات: {average_jumps}")

import matplotlib.pyplot as plt
import seaborn as sns


sns.barplot(x='date', y='score', data=df)
plt.xticks(rotation=45)
plt.title('توزيع النقاط عبر الجلسات')
plt.show()

from sklearn.cluster import KMeans


X = df[['jumps', 'duration_seconds', 'score']]


kmeans = KMeans(n_clusters=3)
kmeans.fit(X)


df['cluster'] = kmeans.labels_

print(df.head())

import seaborn as sns
import matplotlib.pyplot as plt


sns.scatterplot(x='jumps', y='score', hue='cluster', data=df, palette='Set2')
plt.title('توزيع اللاعبين حسب التصنيف (K-means)')
plt.show()

from sklearn.tree import DecisionTreeClassifier


df['failure'] = df['score'].apply(lambda x: 1 if x < 10 else 0)


X = df[['jumps', 'duration_seconds', 'score']]

y = df['failure']


clf = DecisionTreeClassifier()
clf.fit(X, y)

df['predicted_failure'] = clf.predict(X)


print(df[['date', 'score', 'predicted_failure']])

sns.scatterplot(x='jumps', y='score', hue='predicted_failure', data=df, palette='coolwarm')
plt.title('تنبؤات صعوبة اللاعبين (التصنيف: فشل أو نجاح)')
plt.show()

failure_rate = df['predicted_failure'].mean()

if failure_rate > 0.7:
    print("توصية: يفضل إضافة تعليمات في checkpoint 3 لأن 70% من اللاعبين يواجهون صعوبة.")
else:
    print("التوصية: مستوى الصعوبة مناسب حاليًا.")

!pip install streamlit

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.tree import DecisionTreeClassifier


data = [
    {"date": "5/9/2025, 11:53:50 PM", "duration": "11 seconds", "jumps": 5, "score": 0, "obstaclesPassed": 0},
    {"date": "5/9/2025, 11:54:16 PM", "duration": "14 seconds", "jumps": 10, "score": 1, "obstaclesPassed": 1},
    {"date": "5/9/2025, 11:55:19 PM", "duration": "67 seconds", "jumps": 40, "score": 10, "obstaclesPassed": 12},
    {"date": "5/9/2025, 11:56:46 PM", "duration": "153 seconds", "jumps": 100, "score": 30, "obstaclesPassed": 35},
    {"date": "5/10/2025, 1:12:26 PM", "duration": "20 seconds", "jumps": 8, "score": 1, "obstaclesPassed": 2},
    {"date": "5/11/2025, 9:12:22 PM", "duration": "20 seconds", "jumps": 9, "score": 2, "obstaclesPassed": 3},
    {"date": "5/11/2025, 9:13:01 PM", "duration": "59 seconds", "jumps": 55, "score": 12, "obstaclesPassed": 14},
    {"date": "5/11/2025, 9:15:31 PM", "duration": "209 seconds", "jumps": 120, "score": 40, "obstaclesPassed": 42},
    {"date": "5/11/2025, 9:16:00 PM", "duration": "180 seconds", "jumps": 85, "score": 28, "obstaclesPassed": 30},
    {"date": "5/11/2025, 9:20:00 PM", "duration": "90 seconds", "jumps": 50, "score": 15, "obstaclesPassed": 17}
]


df = pd.DataFrame(data)


df['duration_seconds'] = df['duration'].apply(lambda x: int(x.split(' ')[0]))

X = df[['jumps', 'duration_seconds', 'score']]
kmeans = KMeans(n_clusters=3)
kmeans.fit(X)
df['cluster'] = kmeans.labels_


df['failure'] = df['score'].apply(lambda x: 1 if x < 10 else 0)
X = df[['jumps', 'duration_seconds', 'score']]
y = df['failure']
clf = DecisionTreeClassifier()
clf.fit(X, y)
df['predicted_failure'] = clf.predict(X)


st.title('تحليل بيانات اللعبة باستخدام التعلم الآلي')


st.write("### بيانات اللعبة")
st.dataframe(df)

st.write("### رسم بياني لـ K-means Clustering")
fig, ax = plt.subplots()
sns.scatterplot(x='jumps', y='score', hue='cluster', data=df, palette='Set2', ax=ax)
st.pyplot(fig)

st.write("### رسم بياني للتنبؤ بالفشل")
fig, ax = plt.subplots()
sns.scatterplot(x='jumps', y='score', hue='predicted_failure', data=df, palette='coolwarm', ax=ax)
st.pyplot(fig)


failure_rate = df['predicted_failure'].mean()
if failure_rate > 0.7:
    st.write("**توصية تصميمية:** يفضل إضافة تعليمات في checkpoint 3 لأن 70% من اللاعبين يواجهون صعوبة.")
else:
    st.write("**التوصية:** مستوى الصعوبة مناسب حاليًا.")